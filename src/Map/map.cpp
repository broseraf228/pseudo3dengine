#include "map.hpp"
#include <cmath>

Map::Map() : map_x{ 20 }, map_y{ 14 } {
    map = new char[map_x * map_y]
        {
                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'
        };

    objects_map = new char[map_x * map_y];
}

char Map::get(float x, float y) const
{
    x = round(x*3);
    y = round(y*3);

    if (x < 0 || x >= map_x || y < 0 || y >= map_y)
        return '?';


    return map[PM((int)x, (int)y)];
}

void Map::update()
{
    return;
    for (int x = 0; x < map_x; x++)
        for (int y = 0; y < map_y; y++)
            objects_map[PM(x, y)] = map[PM(x, y)];
}


char Map::take(float x, float y)
{
    x = round(x*3);
    y = round(y*3);

    if (x < 0 || x >= map_x || y < 0 || y >= map_y)
        return '?';

    map[PM((int)x, (int)y)] = '.';

    return map[PM((int)x, (int)y)];
}